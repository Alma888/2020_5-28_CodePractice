# 2020_5-28_CodePractice

//标题：n个数里最小的k个 

//找出n个数里最小的k个。
//输入描述：
//每个测试输入包含空格分割的n+1个整数，最后一个整数为k值,n
//不超过100。
//输出描述：
//输出n个整数里最小的k个数。升序输出
//示例1:
//输入
//3 9 6 8 -10 7 -11 19 30 12 23 5
//输出
//-11 -10 3 6 7
//
//===》题目解析：这道题有很多种解法，但是经过咱们前几天的训练，
//     相信大家看到题目就知道要考啥了吧。没错！还是快排的partition思想！
//===》解题思路：排序+分区：
//找到下标为k的位置，则可知，前k小的都在左边，排序输出即可。
import java.util.Scanner;
public class day8_03{

    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        while(sc.hasNext()){
            String[] str=sc.nextLine().split(" ");
            int n=Integer.valueOf(str[str.length-1]);
            int[] arr=new int[str.length-1];
            for(int i=0;i<str.length-1;i++){
                arr[i]=Integer.parseInt(str[i]);
            }
            quickSortInter(arr,0,arr.length-1);
            for(int i=0;i<n;i++){
                System.out.print(i==n-1?arr[i]:arr[i] + " ");
            }
        }
    }
    // [left, right]
    private static void quickSortInter(int[] a,int low,int high){
        if(low>=high){
            // 直到 长度 <= 1
            return;
        }
        // 1. 选择基准值 array[left]
        // 2. 做 partition(也就是下面的quickSort()方法)
        int pivot=quickSort(a,low,high);
        // 左边小区间 [left, pivotIndex - 1]
        // 右边小区间 [pivotIndex + 1, right]
        // 3. 分别对左右小区间按同样方式处理
        quickSortInter(a,low,pivot-1);
        quickSortInter(a,pivot+1,high);
    }
    //partition之挖坑
    private static int quickSort(int[] a,int low,int high){
        int key=a[low];
        while(low<high){
            while(low<high&&a[high]>=key){
                high--;
            }
            a[low]=a[high];
            while(low<high&&a[low]<=key){
                low++;
            }
            a[high]=a[low];
        }
        a[low]=key;
        return low;
    }
}
